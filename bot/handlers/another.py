from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.enums import ParseMode
from .modules.price import price_router
from .modules.volume import volume_router
from .modules.volume_change import volume_change_router
from modules.price.listener.manager import get_price_listener_manager
from modules.volume.listener.manager import get_volume_amount_listener_manager
from modules.volume_change.listener.manager import get_volume_change_listener_manager

another_router = Router()

another_router.include_router(price_router)
another_router.include_router(volume_router) 
another_router.include_router(volume_change_router)


@another_router.message(Command("get_all_listeners"))
async def get_all_listeners_handler(message: Message) -> None:
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ª–∏—Å—Ç–µ–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤.
    
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞:
    - –ò–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã
    - –ê–±—Å–æ–ª—é—Ç–Ω—ã–π –æ–±—ä—ë–º
    - –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–∞
    
    Args:
        message: –°–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å –∫–æ–º–∞–Ω–¥–æ–π.
    """
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ª–∏—Å—Ç–µ–Ω–µ—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    price_manager = await get_price_listener_manager()
    volume_amount_manager = await get_volume_amount_listener_manager()
    volume_change_manager = await get_volume_change_listener_manager()
    
    price_listeners = price_manager.get_all_user_listeners(user_id)
    volume_amount_listeners = volume_amount_manager.get_all_user_listeners(user_id)
    volume_change_listeners = volume_change_manager.get_all_user_listeners(user_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response_parts = []
    
    if price_listeners:
        response_parts.append("<b>üí∞ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:</b>")
        for listener in price_listeners:
            response_parts.append(
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {listener.direction} {listener.percent}% –∑–∞ {listener.interval} —Å–µ–∫.\n"
                f"  ID: <code>{listener.get_condition_id()}</code>"
            )
    
    if volume_amount_listeners:
        response_parts.append("<b>üìä –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –æ–±—ä—ë–º:</b>")
        for listener in volume_amount_listeners:
            direction_text = "–ø—Ä–µ–≤—ã—Å–∏–ª" if listener.direction == ">" else "–æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∏–∂–µ"
            response_parts.append(
                f"‚Ä¢ –û–±—ä—ë–º {direction_text} {listener.amount:,.0f} USD –∑–∞ {listener.interval} —Å–µ–∫.\n"
                f"  ID: <code>{listener.get_condition_id()}</code>"
            )
    
    if volume_change_listeners:
        response_parts.append("<b>üìà –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–∞:</b>")
        for listener in volume_change_listeners:
            response_parts.append(
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ {listener.direction} {listener.percent}% –∑–∞ {listener.interval} —Å–µ–∫.\n"
                f"  ID: <code>{listener.get_condition_id()}</code>"
            )
    
    if not response_parts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    response = "\n\n".join(response_parts)
    await message.answer(response, parse_mode=ParseMode.HTML)

