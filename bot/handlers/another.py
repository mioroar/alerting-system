from html import escape
from typing import List

from aiogram import Router
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.types import Message

from .modules.price import price_router
from .modules.volume import volume_router
from .modules.volume_change import volume_change_router
from .modules.oi import oi_router
from .modules.funding import funding_router
from .modules.composite import alert_router

from modules.price.listener.manager import get_price_listener_manager
from modules.volume.listener.manager import get_volume_amount_listener_manager
from modules.volume_change.listener.manager import get_volume_change_listener_manager
from modules.oi.listener.manager import get_oi_listener_manager
from modules.funding.listener.manager import get_funding_listener_manager
from modules.composite.manager import CompositeListenerManager
from modules.composite.utils import ast_to_string

another_router: Router = Router()

another_router.include_router(price_router)
another_router.include_router(volume_router)
another_router.include_router(volume_change_router)
another_router.include_router(oi_router)
another_router.include_router(funding_router)
another_router.include_router(alert_router)

def _esc(val: object) -> str:
    """–ù–∞–¥—ë–∂–Ω–æ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç –ª—é–±—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è HTML.

    Args:
        val: –ü—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.

    Returns:
        –≠–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞, –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ –≤ HTML‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    return escape(str(val), quote=False)


def _add_section(header: str, rows: List[str], dest: List[str]) -> None:
    """–î–æ–±–∞–≤–ª—è–µ—Ç —Å–µ–∫—Ü–∏—é –≤ —Ä–µ–∑—É–ª—å—Ç–∏—Ä—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è.

    Args:
        header: HTML‚Äë–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ (—É–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ).
        rows:  –°–ø–∏—Å–æ–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫‚Äë—ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–µ–∫—Ü–∏–∏.
        dest:  –°–ø–∏—Å–æ–∫, –≤ –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ —Å–µ–∫—Ü–∏—è.
    """
    if rows:
        dest.append(header)
        dest.extend(rows)


@another_router.message(Command("get_all_listeners"))
async def get_all_listeners_handler(message: Message) -> None:
    """–í—ã–≤–æ–¥–∏—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

    Args:
        message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ Telegram —Å‚ÄØ–∫–æ–º–∞–Ω–¥–æ–π ¬´/get_all_listeners¬ª.
    """
    user_id: int = message.from_user.id

    price_manager = await get_price_listener_manager()
    volume_amount_manager = await get_volume_amount_listener_manager()
    volume_change_manager = await get_volume_change_listener_manager()
    oi_manager = await get_oi_listener_manager()
    funding_manager = await get_funding_listener_manager()
    composite_manager = CompositeListenerManager.instance()

    price_listeners = price_manager.get_all_user_listeners(user_id)
    volume_amount_listeners = volume_amount_manager.get_all_user_listeners(user_id)
    volume_change_listeners = volume_change_manager.get_all_user_listeners(user_id)
    oi_listeners = oi_manager.get_all_user_listeners(user_id)
    funding_listeners = funding_manager.get_all_user_listeners(user_id)
    composite_subscriptions = composite_manager.get_user_subscriptions(user_id)

    parts: List[str] = []

    _add_section(
        "<b>üí∞ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã:</b>",
        [
            (
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã {_esc(l.direction)} {_esc(l.percent)}% "
                f"–∑–∞ {_esc(l.interval)}‚ÄØ—Å.\n"
                f"  ID: <code>{_esc(l.get_condition_id())}</code>"
            )
            for l in price_listeners
        ],
        parts,
    )

    _add_section(
        "<b>üìä –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π –æ–±—ä—ë–º:</b>",
        [
            (
                f"‚Ä¢ –û–±—ä—ë–º {'–ø—Ä–µ–≤—ã—Å–∏–ª' if l.direction == '>' else '–æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∏–∂–µ'} "
                f"{_esc(l.amount):,.0f}‚ÄØUSD –∑–∞ {_esc(l.interval)}‚ÄØ—Å.\n"
                f"  ID: <code>{_esc(l.get_condition_id())}</code>"
            )
            for l in volume_amount_listeners
        ],
        parts,
    )

    _add_section(
        "<b>üìà –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è OI:</b>",
        [
            (
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ OI {_esc(l.direction)} {_esc(l.percent)}% "
                f"–∑–∞ {_esc(l.interval)}‚ÄØ—Å.\n"
                f"  ID: <code>{_esc(l.get_condition_id())}</code>"
            )
            for l in oi_listeners
        ],
        parts,
    )

    _add_section(
        "<b>üìà –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ–±—ä—ë–º–∞:</b>",
        [
            (
                f"‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ –æ–±—ä—ë–º–∞ {_esc(l.direction)} {_esc(l.percent)}% "
                f"–∑–∞ {_esc(l.interval)}‚ÄØ—Å.\n"
                f"  ID: <code>{_esc(l.get_condition_id())}</code>"
            )
            for l in volume_change_listeners
        ],
        parts,
    )

    _add_section(
        "<b>üìÖ –ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ funding:</b>",
        [
            (
                f"‚Ä¢ funding {_esc(l.direction)}{_esc(l.percent)}%‚ÄØ‚â§‚ÄØ"
                f"{_esc(l.time_threshold_sec)}‚ÄØ—Å.\n"
                f"  ID: <code>{_esc(l.get_condition_id())}</code>"
            )
            for l in funding_listeners
        ],
        parts,
    )

    composite_alerts = []
    for condition_id in composite_subscriptions:
        listener = composite_manager.get_listener_by_id(condition_id)
        if listener:
            expr_str = ast_to_string(listener._root)
            cooldown_info = f" (cooldown: {listener._cooldown}s)" if listener._cooldown > 0 else ""
            composite_alerts.append(
                f"‚Ä¢ <code>{_esc(expr_str)}</code>{_esc(cooldown_info)}\n"
                f"  ID: <code>{_esc(condition_id)}</code>"
            )
    
    _add_section(
        "<b>üîó –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:</b>",
        composite_alerts,
        parts,
    )

    if not parts:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫.")
        return

    await message.answer("\n\n".join(parts), parse_mode=ParseMode.HTML)
