import asyncio
import datetime as dt
from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message

from modules.composite.utils import parse_expression, ast_to_string
from modules.composite.manager import CompositeListenerManager

alert_router: Router = Router()

async def composite_loop(base_step: int = 5) -> None:
    mgr = CompositeListenerManager.instance()
    while True:
        try:
            await mgr.tick()
        except Exception as exc:
            from config import logger
            logger.exception(f"Composite tick failed: {exc}")
        await asyncio.sleep(base_step)

@alert_router.message(Command("alert"))
async def alert_handler(message: Message) -> None:
    """–°–æ–∑–¥–∞—ë—Ç/–ø–æ–¥–ø–∏—Å—ã–≤–∞–µ—Ç –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–æ–º–∞–Ω–¥—ã Telegram.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        /alert <expr>

    –ü—Ä–∏–º–µ—Ä:
        /alert price > 5 300 & oi < 100 @10

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
    """
    user_id: int = message.from_user.id
    # –û–±—Ä–µ–∑–∞–µ–º –ª–∏—à—å –ø—Ä–µ—Ñ–∏–∫—Å "/alert ", –æ—Å—Ç–∞–ª—å–Ω–æ–µ —Å—á–∏—Ç–∞–µ–º –≤—ã—Ä–∞–∂–µ–Ω–∏–µ–º.
    expr_text: str = message.text.removeprefix("/alert").strip()

    if not expr_text:
        await message.answer("–ü–æ—Å–ª–µ /alert –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ª–æ–≤–∏–π.")
        return

    try:
        ast = parse_expression(expr_text)
    except Exception as exc:
        from config import logger
        logger.exception(f"Composite expression parse error: {exc}")
        await message.answer(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: <code>{exc}</code>", parse_mode="HTML")
        return

    manager = CompositeListenerManager.instance()
    await manager.add_listener(ast, user_id)
    print("[MAN]", len(manager._listeners), "comp‚Äëlisteners total")

    await message.answer(
        "‚úÖ –ö–æ–º–ø–æ–∑–∏—Ç–Ω—ã–π –∞–ª–µ—Ä—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞—á–Ω—ë—Ç –ø—Ä–æ–≤–µ—Ä—è—Ç—å—Å—è –≤ —Ç–µ—á–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å–µ–∫—É–Ω–¥."
    )

@alert_router.message(Command("unsubscribe"))
async def unsubscribe_handler(message: Message) -> None:
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∫–æ–º–ø–æ–∑–∏—Ç–Ω–æ–≥–æ –∞–ª–µ—Ä—Ç–∞ –ø–æ ID.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        /unsubscribe <ID>

    –ü—Ä–∏–º–µ—Ä:
        /unsubscribe 1234567890

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
    """
    user_id: int = message.from_user.id
    id_text: str = message.text.removeprefix("/unsubscribe").strip()

    if not id_text:
        await message.answer("–ü–æ—Å–ª–µ /unsubscribe –¥–æ–ª–∂–Ω–æ –∏–¥—Ç–∏ ID –∞–ª–µ—Ä—Ç–∞.")
        return

    try:
        condition_id: str = id_text
    except ValueError:
        await message.answer("ID –∞–ª–µ—Ä—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
        return

    manager = CompositeListenerManager.instance()
    success = await manager.unsubscribe_user(condition_id, user_id)
    
    if success:
        await message.answer(
            f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –∞–ª–µ—Ä—Ç–∞ —Å ID: <code>{condition_id}</code>",
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå –ê–ª–µ—Ä—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –≤—ã –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –Ω–µ–≥–æ."
        )

@alert_router.message(Command("unsubscribe_all"))
async def unsubscribe_all_handler(message: Message) -> None:
    """–û—Ç–ø–∏—Å—ã–≤–∞–µ—Ç –æ—Ç –≤—Å–µ—Ö –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        /unsubscribe_all

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
    """
    user_id: int = message.from_user.id
    manager = CompositeListenerManager.instance()
    
    removed_count = await manager.remove_user_from_all_listeners(user_id)
    
    if removed_count > 0:
        await message.answer(
            f"‚úÖ –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç {removed_count} –∞–ª–µ—Ä—Ç–æ–≤."
        )
    else:
        await message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã."
        )

@alert_router.message(Command("my_alerts"))
async def my_alerts_handler(message: Message) -> None:
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ –∞–ª–µ—Ä—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–ø–∏—Å–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å.

    –û–∂–∏–¥–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç:
        /my_alerts

    Args:
        message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è Telegram.
    """
    user_id: int = message.from_user.id
    manager = CompositeListenerManager.instance()
    
    subscriptions = manager.get_user_subscriptions(user_id)
    
    if not subscriptions:
        await message.answer(
            "‚ÑπÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–∞ –∫–æ–º–ø–æ–∑–∏—Ç–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã."
        )
        return
    
    alert_list = []
    for condition_id in subscriptions:
        listener = manager.get_listener_by_id(condition_id)
        if listener:
            expr_str = ast_to_string(listener._root)
            cooldown_info = f" (cooldown: {listener._cooldown}s)" if listener._cooldown > 0 else ""
            alert_list.append(f"‚Ä¢ <code>{expr_str}</code>{cooldown_info}\n  ID: <code>{condition_id}</code>")
    
    response = f"üìã –í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã ({len(alert_list)}):\n\n" + "\n\n".join(alert_list)
    
    await message.answer(response, parse_mode="HTML")
